

1、算法框架:
    1、在字符串s中使用左、右指针，初始化 left = right = 0；把索引左闭右开[left, right) 称为"窗口"。
    2、先不断的增加right扩大窗口，[left, right), 直到窗口中字符串符合要求（包含t中所有字符串）。
    3、此时，停止扩大right，开始增加left缩小窗口[left, right)，直到窗口中的字符串不在符合要求（不包含t中所有字符了）。
        同时每次增加left，都要更新一轮结果。
    4、重复2、3，直到right到达s的尽头。
    注：第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。
        左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是「滑动窗口」这个名字的来历。



void slidingWindow(String s, String t) {
    // needs和window相当于计数器，分别记录T中字符出现次数和「窗口」中的相应字符的出现次数。
    Map<String, Integer> need, window;
    for (char c : t) {
        need.put(c, 1);
        int left = right = 0;
        int isValid = 0;
        while(right < s.length) {
            // c 是将要移入窗口的字符串
            char c = s[right];
            // 右移窗口
            right ++;
            // 进行窗口内数据更新
            ...

            // debug位置
            printf(left, right);

            // 判断左侧窗口是否要收缩
            while(window needs shrink) {
                // d是将要移出窗口的字符
                char d = s[left];
                // 左移窗口
                left++;
                // 进行窗口内数据更新
                ...
            }
        }
    }

}