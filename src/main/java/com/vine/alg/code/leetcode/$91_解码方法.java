package com.vine.alg.code.leetcode;

/**
 * @author 阿季
 * @date 2022-06-25 5:56 PM
 */

public class $91_解码方法 {


    /**
     * 91. 解码方法
     * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
     * <p>
     * 'A' -> "1"
     * 'B' -> "2"
     * ...
     * 'Z' -> "26"
     * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
     * <p>
     * "AAJF" ，将消息分组为 (1 1 10 6)
     * "KJF" ，将消息分组为 (11 10 6)
     * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
     * <p>
     * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
     * <p>
     * 题目数据保证答案肯定是一个 32 位 的整数。
     * <p>
     * <p>
     * <p>
     * 示例 1：
     * <p>
     * 输入：s = "12"
     * 输出：2
     * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
     * 示例 2：
     * <p>
     * 输入：s = "226"
     * 输出：3
     * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
     * 示例 3：
     * <p>
     * 输入：s = "0"
     * 输出：0
     * 解释：没有字符映射到以 0 开头的数字。
     * 含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
     * 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
     */
    public static void main(String[] args) {
        $91_解码方法 j = new $91_解码方法();
        int i = j.numDecodings("226");
        System.out.println(i);
    }

    public int numDecodings(String s) {
        int n = s.length();
        if(n < 1) {
            return 0;
        }
        // dp[i]表示[0...i - 1] 的解码数量
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;

        for (int i = 2; i < n + 1; i++) {
            char c = s.charAt(i - 1);
            char d = s.charAt(i - 2);
            if (c != '0') {
                dp[i] += dp[i - 1];
            }

            if (d == '1' || d == '2' && c <= '6') {
                dp[i] += dp[i - 2];
            }

        }
        return dp[n];

    }
}
























